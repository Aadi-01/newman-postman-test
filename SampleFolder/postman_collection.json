{
	"info": {
		"_postman_id": "6e404248-06d2-4f84-8f89-802839545beb",
		"name": "postman_Course1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Simple Books API status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//this will parse the response which is in JSON to JS Obj",
							"const response= pm.response.json();",
							"",
							"// this is to verify if the JSON response is parsed",
							"console.log(response);",
							"",
							"// access the object property.",
							"console.log(response.status);",
							"console.log(response['status']);",
							"",
							"// pm.test('Should contain status code -OK', ()=>{",
							"//     pm.expect(1).to.be.eql(2)",
							"// });",
							"",
							"// pm.test('Should contain status code -OK', ()=>{",
							"//     pm.expect(1).to.be.eql(1)",
							"// });",
							"",
							"pm.test('Should contain status code -OK', ()=>{",
							"    // pm.expect(response.status).to.be.eql('OKK');",
							"     pm.expect(response.status).to.be.eql('OK');",
							"})",
							"",
							"postman.setNextRequest(\"List of Books\")",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('should have status code 200', ()=>{",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"const response = pm.response.json();",
							"console.log(response)",
							"",
							"const nonFictionBook= response.filter((book)=> book.available === true)",
							"// console.log(nonFictionBook[0])",
							"",
							"const book= nonFictionBook[0]",
							"",
							"if(book){",
							"pm.globals.set(\"bookId\", book.id);",
							"}",
							"",
							"console.log(book)",
							"",
							"",
							"",
							"pm.test('Non Fiction book found ', ()=>{",
							"    pm.expect(book).to.have.an('object')",
							"    pm.expect(book.available).to.be.true",
							"    pm.expect(book.available).to.be.eql(true)",
							"    pm.expect(book.type).to.be.eql('non-fiction')",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?foo=bar&type=non-fiction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "foo",
							"value": "bar"
						},
						{
							"key": "type",
							"value": "crime",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "1",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "2",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "25",
							"disabled": true
						},
						{
							"key": "Limit",
							"value": "2",
							"disabled": true
						},
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', ()=>{",
							"    pm.response.to.have.status(200)",
							"})",
							"// const response= pm.response.json();",
							"// console.log(response)",
							"",
							"// pm.test('should fail',()=>{",
							"//     pm.expect(1).to.be.eql(2)",
							"// })",
							"",
							"const response= pm.response.json();",
							"const stock= response['current-stock']",
							"// console.log(response['current-stock'])",
							"pm.test('Check if it is in Stock', ()=>{",
							"    // pm.expect(1).to.be.above(1)",
							"    pm.expect(stock).to.be.greaterThan(0)",
							"    pm.expect(stock).to.be.above(0)",
							"})",
							"",
							"",
							"postman.setNextRequest(\"Order Books With Random Data such as Random Customer name in this example\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:bookId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",  ()=> {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"Rambo\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Books With Random Data such as Random Customer name in this example",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",  ()=> {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const response= pm.response.json();",
							"",
							"",
							"const setOrderId=response.orderId",
							"console.log(setOrderId)",
							"pm.globals.set(\"orderId\", setOrderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"{{$randomFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all   Book Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Satus code is 200', ()=>{",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single   Book Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerName\": \"Demi {{$randomLastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// this will stop the run in the runner and will not execute the next test.",
							"postman.setNextRequest(null)",
							"",
							"// this will set it to loop. SO be careful with next request method.",
							"// postman.setNextRequest(\"List of Books\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Clients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const response = pm.response.json()",
							"",
							"console.log(response)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"Rambo\",\n   \"clientEmail\": \"Rambo@example.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "0c1f89a3326fc9f5c496c43a70fe0d74de001e77fcd8e0eed6356e1d0afcb4f0",
			"type": "default"
		}
	]
}